#include "sort.h"

/*
 * shellSort
 *	- shellSort 是插入排序的一种改进算法，在原本的插入排序中，如果待排序列是逆序时，
 *  - 会有相当多无意义的元素移动，考虑这样一个序列，10,9,8,7,6,5,4,3,2,1
 *  - 如果使用插入排序，10首先会从第一个位置移动到第二个位置，然后又会从第二个位置移动到第三个位置
 *  - 一直到，循环结束时，他才会移动到最后一个位置。
 *  - 显然，insertionSort的效率与待排序列的有序承担有关，如果一个序列本身就接近有序，
 *  - 那么这个序列所需要移动的元素就少，shellSort就是利用了这个特性。
 *  - shellSort把元素分成几组，对每组进行排序，大体的想法是让元素能够跨域多个元素的移动来减少时间复杂度
 *  - shellSort的时间复杂度与步长序列（收敛到1）有关，较简单的是 n/(2^i) 
**/
 
void shellSort(int a[],int n) {
	for (int inc = n / 2; inc > 0; inc /= 2)
		//对增量为inc的数组进行一次insertionSort
		//	考虑这样一个待排序列，a = { 10,9,8,7,6,5,4,3,2,1} n = 10
		//	开始时，inc = 10/2 = 5,
		//	则是分别对 {10,5}, {9,4}, {8,3}, {7,2}, {6,1}进行排序
		//	{5,4,3,2,1,10,9,8,7,6}，在原本的数组中可以看出，某些元素跨域了多个元素来移动
		//  
		for (int i = inc; i < n; i++) {
			int key = a[i];
			int k;
			for (k = i - inc; k >= 0 && a[k] > key; k -= inc)
				a[k + inc] = a[k];
			a[k + inc] = key;
		}
}